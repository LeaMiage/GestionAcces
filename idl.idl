/************************************
* Contrat IDL pour la gestion des entrées et sorties *
************************************/

module GestionEntreeSortie {

    exception ErreurAuthentification {string message;};
    exception CleInconnue {string message;};
    exception PersonneInconnue {string message;};
    exception ErreurEnvoi {string message;};
    exception AutorisationInconnue {string message;};
    exception EmpreinteInconnue {string message;};
    exception JournalisationImpossible {string message;};
    exception PersonneExistante {string message;};
    exception ChampVide {string message;};
    exception EmpreinteExistante {string message;};
    exception ZoneInconnue {string message;};
    exception AutorisationExistante {string message;};
    
    struct AutorisationTemporaire {
		long idPersonne;
        double dateDebut;
        double dateFin;
    };

    struct AutorisationPermanente {
		long idPersonne;
        string heureDebut;
        string heureFin;
    };
    
    
    struct Collaborateur {
        long idPersonne;
        string nomP;
        string prenomP;
        string photoP;
        string mdp;
    };
    
	/* Structure servant au retour de la fonction authentifier personne */
	struct IdentiteCollaborateur {
		long idPersonne;
        string nomP;
        string prenomP;
        string photoP;
	};
	
    typedef sequence<Collaborateur> listeCollaborateurs;
    
    struct Empreinte {
        long idPersonne;
        string empreinte;
    };
    
    typedef sequence<long> IdPortes;
    
    struct Zone {
        long idZone;
        string libelleZone;
        IdPortes listeIdPortes;
    };

    struct EntreeJournal {
        long idZone;
        long idPorte;
        string photoP;
        string status;
        string typeAcces;
    };
    
    typedef sequence<EntreeJournal> listeEntreesJournal;
    
    interface Authentification {
        long authentifierCompte(
            in long idPersonne,
            in string mdp,
            in string cleAPI
        ) raises(
            ErreurAuthentification,
            CleInconnue
        );

        IdentiteCollaborateur authentifierPersonne(
            in string photoP,
            in string cleAPI
        ) raises(
            ErreurAuthentification,
            CleInconnue
        );
    };
    interface GestionSalaries {
        
        IdentiteCollaborateur rechercherSalarie(
            in long idPersonne,
            in string cleAPI
        ) raises(
            PersonneInconnue,
            CleInconnue
        );

        long verifierPersonne(
            in long idPersonne,
            in string cleAPI
        ) raises(
            PersonneInconnue,
            CleInconnue
        );

    };
    interface CreationCompte {
        long creerCP(
            in string nomP,
            in string prenomP,
            in string mdp,
            in string photoP,
            in string cleAPI
        ) raises(
            CleInconnue,
            PersonneExistante,
			ChampVide
        );

        long creerCT(
            in string nomP,
            in string prenomP,
            in string mdp,
            in string photoP,
            in string cleAPI
        ) raises(
            CleInconnue,
            PersonneExistante,
			ChampVide
        );
    };

    interface EnvoiDonneesCapteurs {
        string accederZone(
            in string empreinte,
            in string photoP,
            in string cleAPI
        ) raises (
            ErreurEnvoi,
            CleInconnue
        );

        string sortirZone(
            in string empreinte,
            in string photoP,
            in string cleAPI
        ) raises (
            ErreurEnvoi,
            CleInconnue
        );
    };

    interface GestionAutorisation {
        void ajouterAutorisationPermanente(
            in AutorisationPermanente ap,
            in string cleAPI
        ) raises(
            AutorisationInconnue,
            AutorisationExistante,
            PersonneInconnue,
            CleInconnue
        );

        void modifierAutorisationPermanente(
            in AutorisationPermanente ap,
            in AutorisationPermanente np,
            in string cleAPI
        ) raises(
            AutorisationInconnue,
            AutorisationExistante, 
            PersonneInconnue,
            CleInconnue
        );

        void supprimerAutorisationPermanente(
            in AutorisationPermanente ap,
            in string cleAPI
        ) raises(
            AutorisationInconnue,
            PersonneInconnue,
            CleInconnue
        );

        void ajouterAutorisationTemporaire(
            in AutorisationTemporaire at,
            in string cleAPI
        ) raises(
            AutorisationInconnue,
            AutorisationExistante,
            PersonneInconnue,
            CleInconnue
        );

        void modifierAutorisationTemporaire(
            in AutorisationTemporaire at,
            in AutorisationTemporaire nt,
            in string cleAPI
        ) raises(
            AutorisationInconnue,
            AutorisationExistante,
            PersonneInconnue,
            CleInconnue
        );

        void supprimerAutorisationTemporaire(
            in AutorisationTemporaire at,
            in string cleAPI
        ) raises(
            AutorisationInconnue,
            PersonneInconnue,
            CleInconnue
        );
    };
    interface GestionEmpreinte {
        void ajouterEmpreinte(
            in long idPersonne,
            in string empreinte,
            in string cleAPI
        ) raises(
            EmpreinteExistante,
            CleInconnue,
			ChampVide /* Utilisé pour l'empreinte */
        );
        
        void modifierEmpreinte(
            in long idPersonne,
            in string empreinte,
            in string cleAPI
        ) raises(
            PersonneInconnue,
            CleInconnue,
			ChampVide /* Utilisé pour l'empreinte */
        );

        void supprimerEmpreinte(
            in long idPersonne,
            in string cleAPI
        ) raises(
            PersonneInconnue,
            CleInconnue
        );
    };
    interface VerificationEmpreinte {
        void verifierEmpreinte(
            in long idPersonne,
            in string empreinte,
            in string cleAPI
        ) raises(
            EmpreinteInconnue,
            CleInconnue,
			ChampVide /* Utilisé pour l'empreinte */
        );
    };
    interface ConsultationJournal {
        listeEntreesJournal consulterJournal(
            in string cleAPI
        ) raises(
            CleInconnue
        );
    };
    interface Journalisation {
        void journaliser(
            in long idZone,
            in long idPorte,
            in string photoP,
            in string statut,
            in string typeAcces,
            in string cleAPI
        ) raises(
            JournalisationImpossible,
            CleInconnue
        );
    };
};
